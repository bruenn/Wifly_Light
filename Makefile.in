#******************************************************************************
# Copyright (C) 2014 Nils Weiss, Patrick Bruenn.
#
# This file is part of WyLight.
#
# WyLight is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# WyLight is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with WyLight.  If not, see <http://www.gnu.org/licenses/>.

#******************************************************************************

#******************************************************************************
#
# Makefile - Rules for building the WyLight bootloader.
#
#
#*****************************************************************************
PRJ_PREFIX=WyLight_
PRJ_NAME=${PRJ_PREFIX}$(MAKECMDGOALS)
FLAVOUR=$(MAKECMDGOALS)

# linker script
SCATTERgcc_${PRJ_NAME}=${ROOT}/${FLAVOUR}/${PRJ_NAME}.ld
ENTRY_${PRJ_NAME}=ResetISR

ifeq ($(MAKECMDGOALS),cc_bl)
PREFIX=arm-none-eabi-
endif

ifeq ($(MAKECMDGOALS),cc_fw) 
PREFIX=arm-none-eabi-
endif

ifeq ($(MAKECMDGOALS),cc_te)
PREFIX=arm-none-eabi-
endif

# Tools
GIT=@GIT@
DOXYGEN=@DOXYGEN@
NDK=@NDK@
WINE=@WINE@
PIC_CC8E=@PIC_CC8E@

# Include the common make definitions.
include makedefs

# Additional Compiler Flags
sim: CFLAGS+=-DSIMULATOR

cc_fw: CFLAGS+=-DSL_PLATFORM_MULTI_THREADED
cc_fw: CFLAGS+=-DTARGET_IS_BLIZZARD_RB1
cc_fw: CFLAGS+=-DUSE_FREERTOS
cc_fw: CFLAGS+=-Dcc3200

ut: CFLAGS+=-DSIMULATOR

cc_bl: CFLAGS+=-DNOTERM
cc_bl: CFLAGS+=-Dcc3200
cc_bl: CFLAGS+=-DTARGET_IS_BLIZZARD_RB1

cc_te: CFLAGS+=-DTARGET_IS_BLIZZARD_RB1
cc_te: CFLAGS+=-Dcc3200

# add additional linker flags
sim: LDFLAGS+=-lcrypto

cli: LDFLAGS+=-lpthread

TARGETS=test
TARGETS+=cli
TARGETS+=cc_fw
TARGETS+=cc_bl
TARGETS+=cc_te
TARGETS+=sim
TARGETS+=docu
MESSAGES="Attention:\n"

ifneq "not_found" "@PIC_CC8E@"
	ifneq "" "@PIC_CC8E@"
		ifneq "not_found" "@WINE@"
			TARGETS+=firmware_pic
		else
			MESSAGES+="install wine and run ./configure again to make pic firmware\n"
		endif
	else
		MESSAGES+="install CC8E.exe from http://www.bknd.com in your home directory and run ./configure again to make pic firmware\n"
	endif
else
	MESSAGES+="install CC8E.exe from http://www.bknd.com in your home directory and run ./configure again to make pic firmware\n"
endif

ifneq "not_found" "@GL@"
ifneq "not_found" "@GLU@"
ifneq "not_found" "@glut@"
TARGETS+=firmware_simu
else
endif
else
endif
else
MESSAGES+="install openGL development library to make simu\n"
endif

ifneq "not_found" "@NDK@"
TARGETS+=android_client
else
MESSAGES+="install android ndk and run ./configure again to make android_client\n"
endif

# The default rule, which causes the bootloader be built as bootloader
all:
	@$(foreach target,$(TARGETS),make $(target); make clean;)
	@echo $(MESSAGES)

pre-build: clean

post-build: 
	openssl sha256 -binary ${BINDIR}/${PRJ_NAME}.bin > ${BINDIR}/${PRJ_NAME}.sha

# build the bootloader as normal bootloader 
cc_fw: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.axf post-build

cc_bl: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.axf post-build

cli: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

cc_te: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.axf

sim: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

ut: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

test: clean-all ${OBJDIR} ${BINDIR} 
	make ut 
	./exe/WyLight_ut.bin
	make firmware_test 
	make library_test

BL_FILE=${OBJDIR}/${PRJ_PREFIX}bl.bin
FW_FILE=${OBJDIR}/${PRJ_PREFIX}fw.bin

install_bl:
	sh install.sh ${BL_FILE} "/sys/mcuimg.bin"

install_fw:
	sh install.sh ${FW_FILE} "/temp/firmware.bin"

# The rule to clean out all the build products.
clean:
	@rm -rf ${OBJDIR} ${wildcard *~}
	make ${OBJDIR}

# The rule to clean out all the build products.
clean-all:
	@rm -rf ${OBJDIR} ${wildcard *~}
	@rm -rf ${BINDIR} ${wildcard *~}
	@rm -f ${FW_FILE}

# The rule to create the target directories.
${OBJDIR}:
	@mkdir -p ${OBJDIR}

${BINDIR}:
	@mkdir -p ${BINDIR}

# Include the automatically generated dependency files.
ifneq ($(wildcard ./$(MAKECMDGOALS)/Makefile.$(MAKECMDGOALS)),)
include $(MAKECMDGOALS)/Makefile.$(MAKECMDGOALS) 
endif    

ifneq ($(filter firmware_%, $(MAKECMDGOALS)),)
include Makefile.firmware
endif 

ifneq ($(filter android_%, $(MAKECMDGOALS)),)
include Makefile.android
endif

ifneq ($(filter docu%, $(MAKECMDGOALS)),)
include Makefile.docu
endif

ifneq ($(filter library%, $(MAKECMDGOALS)),)
include Makefile.library
endif
