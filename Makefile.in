#******************************************************************************
# Copyright (C) 2014 Nils Weiss, Patrick Bruenn.
#
# This file is part of WyLight.
#
# WyLight is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# WyLight is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with WyLight.  If not, see <http://www.gnu.org/licenses/>.

#******************************************************************************

#******************************************************************************
#
# Makefile - Rules for building the WyLight bootloader.
#
#
#*****************************************************************************
PRJ_PREFIX=WyLight_
PRJ_NAME=${PRJ_PREFIX}$(MAKECMDGOALS)
FLAVOUR=$(MAKECMDGOALS)

ifeq ($(MAKECMDGOALS),cc_bl)
PREFIX=arm-none-eabi-
endif
ifeq ($(MAKECMDGOALS),cc_fw) 
PREFIX=arm-none-eabi-
endif
ifeq ($(MAKECMDGOALS),cc_te)
PREFIX=arm-none-eabi-
endif
ifeq ($(MAKECMDGOALS),bist)
PREFIX=arm-none-eabi-
endif

# Tools
GIT=@GIT@
DOXYGEN=@DOXYGEN@
NDK=@NDK@
WINE=@WINE@
PIC_CC8E=@PIC_CC8E@
CPPCHECKER=@CPPCHECKER@
OPENSSL=@OPENSSL@
UNCRUSTIFY=@UNCRUSTIFY@
ARM_GCC=@ARM_GCC@
ARM_GPP=@ARM_GPP@
ARM_OBJCOPY=@ARM_OBJCOPY@
ARM_AR=@ARM_AR@
ARM_LD=@ARM_LD@
# Include the common make definitions.
include makedefs

TARGETS=test
TARGETS+=cli
TARGETS+=cc_fw
TARGETS+=cc_bl
TARGETS+=cc_te
TARGETS+=docu
TARGETS+=filedownloader
MESSAGES="Attention:\n"

ifneq "not_found" "@PIC_CC8E@"
	ifneq "not_found" "@WINE@"
		TARGETS+=firmware_pic
	else
		MESSAGES+="install wine and run ./configure again to make pic firmware\n"
	endif
else
	MESSAGES+="install CC8E.exe from http://www.bknd.com in your home directory and run ./configure again to make pic firmware\n"
endif

ifneq "not_found" "@GL@"
ifneq "not_found" "@GLU@"
ifneq "not_found" "@glut@"
TARGETS+=firmware_simu
else
endif
else
endif
else
MESSAGES+="install openGL development library to make simu\n"
endif

ifneq "not_found" "@NDK@"
TARGETS+=android_client
else
MESSAGES+="install android ndk and run ./configure again to make android_client\n"
endif

ifneq "not_found" "@OPENSSL@"
TARGETS+=sim
else
MESSAGES+="install openssl and run ./configure again to make sim\n"
endif

# The default rule, which causes the bootloader be built as bootloader
all:
	@$(foreach target,$(TARGETS),@make $(target); @make clean;)
	@echo $(MESSAGES)

pre-build: clean

post-build: 
	$(OPENSSL) sha256 -binary ${BINDIR}/${PRJ_NAME}.bin > ${BINDIR}/${PRJ_NAME}.sha

# build the bootloader as normal bootloader 
cc_fw: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.elf post-build

cc_bl: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.elf post-build

cli: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

cc_te: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.elf

bist: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.elf post-build

sim: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

ut: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

filedownloader: pre-build ${OBJDIR} ${BINDIR} ${BINDIR}/${PRJ_NAME}.bin

ENDINGS=c h cpp
CODE_DIRS=android bist cc_bl cc_fw cc_te cli common driverlib firmware library sim
filelist:
	@rm -f $@.txt
	@$(foreach END, ${ENDINGS}, $(foreach DIR, ${CODE_DIRS}, find ./$(DIR) -name "*.$(END)" >> $@.txt;))
	@echo "Created $@.txt"

uncrustify: filelist
	${UNCRUSTIFY} -F filelist.txt --no-backup -c uncrustify.cfg

test: clean-all ${OBJDIR} ${BINDIR} 
	@make ut 
	@./exe/WyLight_ut.bin
	@make firmware_test 
	@make library_test
	${CPPCHECKER} . --force --quiet

help: 
	@echo "Targets: "
	@echo -GENERAL-
	@echo test
	@echo clean	
	@echo clean-all
	@echo all	
	@echo install_bl
	@echo install_fw
	@echo cli
	@echo filedownloader
	@echo -CC3200-
	@echo cc_fw
	@echo cc_bl
	@echo sim
	@echo ut	
	@echo -PIC-
	@echo firmware_pic 	
	@echo firmware_pic_release
	@echo firmware_simu
	@echo firmware_test
	@echo -LIBRARY-
	@echo library
	@echo library_test	
	@echo -ANDROID-
	@echo android_client
	@echo android_clean
	@echo android_test
	@echo -DOCUMENTATION-
	@echo docu			

# The rule to clean out all the build products.
clean:
	@rm -rf ${OBJDIR} ${wildcard *~}
	@make --no-print-directory ${OBJDIR}

# The rule to clean out all the build products.
clean-all:
	@rm -rf ${OBJDIR} ${wildcard *~}
	@rm -rf ${BINDIR} ${wildcard *~}
	@rm -f ${FW_FILE}

# The rule to create the target directories.
${OBJDIR}:
	@mkdir -p ${OBJDIR}

${BINDIR}:
	@mkdir -p ${BINDIR}

# Where to find source files that do not live in this directory.
VPATH=${ROOT}/library
VPATH+=${ROOT}/firmware
VPATH+=${ROOT}/cli

# Where to find header files that do not live in the source directory.
IPATH=${ROOT}/library
IPATH+=${ROOT}/firmware
IPATH+=${ROOT}/cc_bl
IPATH+=${ROOT}/cli

include Makefile.cc_te 
include Makefile.cc_bl
include Makefile.cc_fw
include Makefile.bist
include Makefile.ut
include Makefile.sim
include Makefile.firmware
include Makefile.android
include Makefile.docu
include Makefile.library
include Makefile.cli

