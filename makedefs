#******************************************************************************
# Copyright (C) 2014 Nils Weiss, Patrick Bruenn.
#
# This file is part of WyLight.
#
# WyLight is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# WyLight is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with WyLight.  If not, see <http://www.gnu.org/licenses/>.
#******************************************************************************
#******************************************************************************
#
# Makedefs - Common rules for GCC Makefile
#
#  Copyright (C) 2014 Texas Instruments Incorporated - http:#www.ti.com/
#
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions
#  are met:
#
#    Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#    Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the
#    distribution.
#
#    Neither the name of Texas Instruments Incorporated nor the names of
#    its contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#*****************************************************************************

ROOT=.
RTOS_SOURCE_DIR=${ROOT}/third_party/FreeRTOS
OBJDIR?=obj
BINDIR?=exe
CLI_DIR=${ROOT}/cli
FW_DIR=${ROOT}/firmware
LIB_DIR=${ROOT}/library
OUT_DIR=${BINDIR}

OPENGL_LIB=-lGL -lGLU -lglut

ifeq (${PREFIX}, arm-none-eabi-)

AFLAGS=-mthumb \
       -mcpu=cortex-m4  \
       -MD

CFLAGS= -ffunction-sections \
        --specs=nano.specs \
		-fno-common \
    	-fmessage-length=0 \
        -fdata-sections     \
        -mcpu=cortex-m4 \
        -fno-builtin \
        -pedantic \
        -std=c11 \
        -mthumb \
        -flto \
        -Wall \
        -O1 \
        -MD \
        -g 

CPPFLAGS= \
    -ffunction-sections \
    --specs=nano.specs \
    -fno-common \
    -fmessage-length=0 \
    -fdata-sections \
    -fno-exceptions \
    -mcpu=cortex-m4 \
    -fno-builtin \
    -std=c++0x \
    -pedantic \
    -fno-rtti \
    -mthumb \
    -Wall \
    -flto \
    -MD \
    -O1 \
    -c \
    -g

DEFINES=	-Dcc3200 \
    		-DDEBUG

LDFLAGS= 	-ffunction-sections \
    		--specs=nano.specs \
    		-fno-common \
    		-fmessage-length=0 \
    		-fdata-sections \
    		-fno-exceptions \
    		-mcpu=cortex-m4 \
    		-fno-builtin \
    		-std=c11 \
    		-pedantic \
    		-fno-rtti \
    		-mthumb \
    		-Wall \
    		-MD \
    		-O1 \
    		-g \
			-Wl,--gc-sections \
         	-static

else 
# The flags passed to the compiler when we are not using arm-none-eabi tools.
CFLAGS= -pedantic \
        -std=c99 \
        -Wall \
        -O1 \
        -g \
        -c

CPPFLAGS= \
    -std=c++0x \
    -pedantic \
    -Wall \
    -c 

LDFLAGS+=	-lpthread \
			-lcrypto

CPP=$(CXX)

endif

CC=${PREFIX}gcc
CPP=${PREFIX}g++
AR=${PREFIX}ar
LD=${PREFIX}ld
OBJCOPY=${PREFIX}objcopy

#LIBGCC:=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}
#LIBC:=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}
#LIBM:=${shell ${CC} ${CFLAGS} -print-file-name=libm.a}
#LIBSTDCPP:=${shell ${CPP} ${CPPFLAGS} -print-file-name=libstdc++_s.a}
#LIBSUPCPP:=${shell ${CPP} ${CPPFLAGS} -print-file-name=libsupc++_s.a}

LIBGCC:=-lgcc
LIBC:=-lc
LIBM:=-lm
LIBSTDCPP:=-lstdc++
LIBSUPCPP:=-lsupc++

# Add the include file paths to AFLAGS and CFLAGS.
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CPPFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}

${OBJDIR}/%.o: %.cpp
	 @${CPP} ${CPPFLAGS} ${DEFINES} -o ${@} ${<}

${OBJDIR}/%.o: %.c
	 @${CC} ${CFLAGS} ${DEFINES} -c -Dgcc -o ${@} ${<}

${OBJDIR}/%.o: %.S
	@${CC} ${AFLAGS} ${DEFINES} -Dgcc -o ${@} -c ${<}

${BINDIR}/%.a:
	 @${AR} -cr ${@} ${^}

${BINDIR}/%.elf:
	 @${CC} -T ${ROOT}/${FLAVOUR}/${PRJ_NAME}.ld ${LDFLAGS} --entry ResetISR -o ${@} $(filter %.o %.a, ${^}) \
	 '${LIBM}' '${LIBC}' '${LIBGCC}' '${LIBSTDCPP}' '${LIBSUPCPP}'
	 @${OBJCOPY} -O binary ${@} ${@:.elf=.bin}

${BINDIR}/%.bin:
	@${CPP} ${LDFLAGS} ${DEFINES} -o ${@} $(filter %.o %.a, ${^})
