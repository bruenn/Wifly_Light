#******************************************************************************
# Copyright (C) 2014 Nils Weiss, Patrick Bruenn.
#
# This file is part of WyLight.
#
# WyLight is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# WyLight is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with WyLight.  If not, see <http://www.gnu.org/licenses/>.
#******************************************************************************

ROOT=.
RTOS_SOURCE_DIR=${ROOT}/third_party/FreeRTOS
OBJDIR?=obj
BINDIR?=exe
CLI_DIR=${ROOT}/cli
FW_DIR=${ROOT}/firmware
LIB_DIR=${ROOT}/library
OUT_DIR=${BINDIR}

OPENGL_LIB=-lGL -lGLU -lglut

ifeq (${PREFIX}, arm-none-eabi-)

AFLAGS=-mthumb \
       -mcpu=cortex-m4  \
       -MD

CFLAGS= -ffunction-sections \
        --specs=nano.specs \
		-fno-common \
    	-fmessage-length=0 \
        -fdata-sections     \
        -mcpu=cortex-m4 \
        -fno-builtin \
        -pedantic \
        -std=c11 \
        -mthumb \
        -Wall \
        -O1 \
        -MD \
        -g 

CPPFLAGS= \
    -ffunction-sections \
    --specs=nano.specs \
    -fno-common \
    -fmessage-length=0 \
    -fdata-sections \
    -fno-exceptions \
    -mcpu=cortex-m4 \
    -fno-builtin \
    -std=c++0x \
    -pedantic \
    -fno-rtti \
    -mthumb \
    -Wall \
    -MD \
    -O1 \
    -c \
    -g

DEFINES=	-Dcc3200 \
    		-DDEBUG

LDFLAGS= 	-ffunction-sections \
    		--specs=nano.specs \
    		-fno-common \
    		-fmessage-length=0 \
    		-fdata-sections \
    		-fno-exceptions \
    		-mcpu=cortex-m4 \
    		-fno-builtin \
    		-std=c11 \
    		-pedantic \
    		-fno-rtti \
    		-mthumb \
    		-Wall \
    		-MD \
    		-O1 \
    		-g \
			-Wl,--gc-sections \
         	-static

else 
# The flags passed to the compiler when we are not using arm-none-eabi tools.
CFLAGS= -pedantic \
        -std=c11 \
        -Wall \
        -O1 \
        -g \
        -c

CPPFLAGS= \
    -std=c++0x \
    -pedantic \
    -Wall \
    -c 

LDFLAGS+=	-lpthread \
			-lcrypto

CPP=$(CXX)

endif

CC=${PREFIX}gcc
CPP=${PREFIX}g++
AR=${PREFIX}ar
LD=${PREFIX}ld
OBJCOPY=${PREFIX}objcopy

# Add the include file paths to AFLAGS and CFLAGS.
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CPPFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}

${OBJDIR}/versionfile.o: $(MAKECMDGOALS)/versionfile.txt
	 @${OBJCOPY} --input binary --output elf32-littlearm --binary-architecture arm ${<} ${@}

${OBJDIR}/%.o: %.cpp
	 @${CPP} ${CPPFLAGS} ${DEFINES} -o ${@} ${<}

${OBJDIR}/%.o: %.c
	 @${CC} ${CFLAGS} ${DEFINES} -c -Dgcc -o ${@} ${<}

${OBJDIR}/%.o: %.S
	@${CC} ${AFLAGS} ${DEFINES} -Dgcc -o ${@} -c ${<}

${BINDIR}/%.a:
	 @${AR} -cr ${@} ${^}

${BINDIR}/%.elf:
	 @${CPP} -T ${ROOT}/${FLAVOUR}/${PRJ_NAME}.ld ${LDFLAGS} --entry ResetISR -o ${@} $(filter %.o %.a, ${^}) \
	 -lgcc -lm -lc -lstdc++ -lsupc++
	 @${OBJCOPY} -O binary ${@} ${@:.elf=.bin}

${BINDIR}/%.bin:
	@${CPP} ${LDFLAGS} ${DEFINES} -o ${@} $(filter %.o %.a, ${^})
